import pylab as plt
import numpy as np
from scipy.optimize import leastsq

#data=np.array([12109.83689,12459.57401,13863.30387,15591.95785,16507.82042,15747.73615,14030.33467,12517.25251,11984.5065,12698.72411,14289.18242,15902.96608,16357.13867,15204.51267,13456.18564,12179.38541,12027.31725,13073.12282,14768.63047,16128.86543,16034.45275,14569.58697,12878.42527,11899.86019,12133.00938,13449.58535])
data =np.array([14418.77374, 14193.30027, 14837.3898, 16091.24385, 17336.26783, 17640.68278, 16718.17709, 15427.85906, 14552.86306, 14499.95625, 15314.56337, 16684.07992, 17923.14796, 17995.92612, 16849.2247, 15529.21067, 14762.02126, 14880.01394, 15857.80272, 17323.68312, 18480.47152, 18198.59443, 16837.2597, 15536.88658, 14914.74114, 15219.59378])
data =np.array([8214.908212,
8281.562,
8371.179381,
8482.022319,
8611.955032,
8758.524894,
8919.030371,
9090.593536,
9270.220004,
9454.851884,
9641.414902,
9826.854775,
10008.1702,
10182.45368,
10346.91099,
10498.90939,
10635.99998,
10755.9685,
10856.86938,
10937.0657,
10995.27325,
11030.58869,
11042.51832,
11030.99205,
10996.36283,
10939.41212,
10861.31403,
10763.61858,
10648.20718,
10517.26158,
10373.21435,
10218.71051,
10056.5654,
9889.727258,
9721.238987,
9554.201375,
9391.730792,
9236.919649,
9092.786267,
8962.2216,
8847.923889,
8752.337874,
8677.579343,
8625.371798,
8596.984086,
8593.184258,
8614.207864,
8659.754821,
8728.996569,
8820.618369,
8932.867706,
9063.613831,
9210.421649,
9370.615176,
9541.341242,
9719.630255,
9902.44508,
10086.7206,
10269.41352,
10447.52618,
10618.14906,
10778.49357,
10925.92856,
11058.02351,
11172.58843,
11267.71825,
11341.8375,
11393.7403,
11422.62204,
11428.10371,
11410.24488,
11369.54266,
11306.91741,
11223.68786,
11121.53602,
11002.46576,
10868.76,
10722.93171,
10567.67986,
10405.84949,
10240.38947,
10074.31368,
9910.66526,
9752.474964,
9602.72195,
9464.285728,
9339.894053,
9232.069322,
9143.067537,
9074.815643,
9028.857678,
9006.300877,
9007.780936,
9033.436006,
9082.908013,
9155.352943,
9249.477312,
9363.580652,
9495.611029,
9643.225845,
9803.847328,
9974.721852,
10152.96718,
10335.62266,
10519.68538,
10702.14765,
10880.03591,
11050.44059,
11210.55774,
11357.72661,
11489.47303,
11603.56154,
11698.03692,
11771.28238,
11822.05361,
11849.53114,
11853.33312,
11833.53945,
11790.68662,
11725.75563,
11640.14022,
11535.60955,
11414.26243,
11278.47731,
11130.85901,
10974.19432,
10811.40145,
10645.48866,
10479.51437,
10316.543,
10159.61169,
10011.67756,
9875.582171,
9753.991938,
9649.351403,
9563.820653,
9499.222926,
9456.993078,
9438.128574,
9443.16273,
9472.14415,
9524.639153,
9599.746278,
9696.129303,
9812.063199,
9945.480575,
10094.03262,
10255.13857,
10426.04509,
10603.86583,
10785.63338,
10968.33099,
11148.93887,
11324.46097,
11491.96921,
11648.64241,
11791.80668,
11918.99104,
12027.97292,
12116.83224,
12184.00753,
12228.34165,
12249.11554,
12246.07815,
12219.45473,
12169.94014,
12098.67603,
12007.21598,
11897.47637,
11771.68718,
11632.3351,
11482.11,
11323.85398,
11160.51107,
10995.08908,
10830.61367,
10670.09386,
10516.48002,
10372.62421,
10241.2388,
10124.84784,
10025.73919,
9945.915602,
9887.042392,
9850.407085,
9836.879085,
9846.886415,
9880.402251,
9936.947495,
10015.60701,
10115.06007,
10233.6193,
10369.27504,
10519.74457,
10682.52039,
10854.91572,
11034.10857,
11217.17794,
11401.14246,
11582.99534,
11759.73632,
11928.4163,
12086.17089,
12230.27267,
12358.18353,
12467.61155,
12556.57278,
12623.44084,
12667.01847,
12686.56568,
12681.83541,
12653.08343,
12601.06429,
12526.99988,
12432.54325,
12319.72348,
12190.88712,
12048.63818,
11895.7747,
11735.23847,
11570.0576,
11403.30543,
11238.05618,
11077.34632,
10924.13211,
10781.25401,
10651.3909,
10537.01694,
10440.35331,
10363.32416,
10307.50809,
10274.10215,
10263.88474,
10277.19761,
10313.93474,
10373.54937,
10455.06994,
10557.12927,
10678.00374,
10815.65548,
10967.77857,
11131.84176,
11305.13757,
11484.81628,
11667.92615,
11851.45266,
12032.34489,
12207.56362,
12374.10961,
12529.08055,
12669.71591,
12793.45463,
12898.0062,
12981.40588,
13042.08982,
13078.94025,
13091.33478,
13079.17612,
13042.88804,
12983.40821,
12902.14711,
12800.9408,
12681.98657,
12547.77894,
12401.03941,
12244.65823,
12081.63234,
11915.01822,
11747.88426,
11583.27232,
11424.1582,
11273.41822,
11133.78853,
11007.8295,
10897.88445,
10806.03736,
10734.07361,
10683.43847,
10655.20439,
10650.04397,
10668.21307,
10709.54402,
10773.45371,
10858.95786,
10964.70103,
11088.98683,
11229.82112,
11384.9465,
11551.88538,
11727.9766,
11910.40983,
12096.2608,
12282.52262,
12466.13544,
12644.02704,
12813.14874,
12970.52451,
13113.30589,
13238.83811,
13344.72654,
13428.91306,
13489.75314,
13526.07462,
13537.23631,
13523.14966,
13484.29236,
13421.68833,
13336.86158,
13231.78473,
13108.80047,
12970.55117,
12819.9039,
12659.87735,
12493.58295,
12324.17267,
12154.78751,
11988.52029,
11828.37812,
11677.24554,
11537.84891,
11412.7196,
11304.15634,
11214.18663,
11144.52597,
11096.54599,
11071.23825,
11069.1972,
11090.60125,
11135.21236,
11202.38266,
11291.07133,
11399.87477,
11527.05295,
11670.57181,
11828.13774,
11997.23525,
12175.16276,
12359.06411,
12545.96316,
12732.79108,
12916.42385,
13093.71383,
13261.53823,
13416.849,
13556.72973,
13678.47837,
13779.6741,
13858.27098,
13912.66997,
13941.79488,
13945.1346,
13922.78186,
13875.41725,
13804.286,
13711.14225,
13598.17498,
13467.92597,
13323.20493,
13167.01178,
13002.46162,
])
import numpy, scipy.optimize

def fit_sin(tt, yy):
    '''Fit sin to the input time sequence, and return fitting parameters "amp", "omega", "phase", "offset", "freq", "period" and "fitfunc"'''
    tt = numpy.array(tt)
    yy = numpy.array(yy)
    ff = numpy.fft.fftfreq(len(tt), (tt[1]-tt[0]))   # assume uniform spacing
    Fyy = abs(numpy.fft.fft(yy))
    guess_freq = abs(ff[numpy.argmax(Fyy[1:])+1])   # excluding the zero frequency "peak", which is related to offset
    guess_amp = numpy.std(yy) * 2.**0.5
    guess_offset = numpy.mean(yy)
    guess = numpy.array([guess_amp, 2.*numpy.pi*guess_freq, 0.,2.*numpy.pi*guess_freq, 0., guess_offset])

    def sinfunc(t, A, w1, p1,w2,p2, c):  return A * numpy.sin(w1*t + p1)*numpy.sin(w2*t + p2) + c
    popt, pcov = scipy.optimize.curve_fit(sinfunc, tt, yy, p0=guess)
    A, w1, p1,w2,p2, c= popt
    f = w1/(2.*numpy.pi)
    fitfunc = lambda t: A * numpy.sin(w1*t + p1)*numpy.sin(w2*t + p2) + c
    return {"amp": A, "omega1": w1, "phase1": p1,"omega2": w2, "phase2": p2 ,"offset": c, "freq": f, "period": 1./f, "fitfunc": fitfunc, "maxcov": numpy.max(pcov), "rawres": (guess,popt,pcov)}


N, amp, omega, phase, offset, noise = 360, 1., 2., .5, 4., 3
#N, amp, omega, phase, offset, noise = 50, 1., .4, .5, 4., .2
#N, amp, omega, phase, offset, noise = 200, 1., 20, .5, 4., 1
tt = numpy.linspace(0, N, N)
tt2 = numpy.linspace(0, N, 10*N)


res = fit_sin(tt, data)
#print( "Amplitude=%(amp)s, Angular freq.=%(omega)s, phase=%(phase)s, offset=%(offset)s, Max. Cov.=%(maxcov)s" % res )

#plt.plot(tt, yy, "-k", label="y", linewidth=2)
plt.plot(tt, data, "ok", label="y with noise")
plt.plot(tt2, res["fitfunc"](tt2), "r-", label="y fit curve", linewidth=2)
plt.plot(tt, res["fitfunc"](tt), "g-", label="y fit curve tt", linewidth=2)


print(res["amp"],res["omega1"],res["phase1"],res["omega2"],res["phase2"],res["offset"])
area=np.trapz(data -.1000, dx = 1)
print(area)
#plt.legend(loc="best")
#plt.show()

x = np.arange(0,4*np.pi-1,0.1)   # start,stop,step

#y = res["amp"]*np.sin(x*res["omega"]+res["phase"])+res["offset"]
y = res["amp"]*np.sin(x*res["omega1"]+res["phase1"])*np.sin(x*res["omega2"]+res["phase2"])+res["offset"]

#y_area = res["amp"]*np.sin(tt*res["omega"]+res["phase"])+res["offset"]
y_area = res["amp"]*np.sin(x*res["omega1"]+res["phase1"])*np.sin(x*res["omega2"]+res["phase2"])+res["offset"]
area2=np.trapz(y_area -.1000, dx = 1)
print(area2)
plt.plot(x,y, 'b-')
plt.xlabel('x values from 0 to 4pi')  # string must be enclosed with quotes '  '
plt.ylabel('sin(x)')
plt.title('Plot of sin and cos from 0 to 4pi')     # legend entries as seperate strings in a list
plt.show()